``1-my_list``module
===================

using ``1-my_list``
-------------------

first, import function from module:
	>>> MyList = __import__('1-my_list').MyList

Test 0: is MyList an instance of list?:

	>>> test = MyList()
	>>> isinstance(test, list)
	True

Test 1: is MyList of class MyList?:

	>>> test = MyList()
	>>> type(test) == MyList
	True

Test 2: is print_sorted an instance method?:

	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Test 3: no arguments passed to print_sorted:

	>>> test = MyList()
	>>> test.__class__.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: print_sorted() missing 1 required positional argument: 'self'

Test 4: Test: empty list for print_sorted:

	>>> test = MyList()
	>>> test.print_sorted()
	[]

Test 5: additional single argument passed to:

	>>> test.print_sorted([1])
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

Test 6: 2 aditional args passed:

	>>> test.print_sorted([1, 8, 7], 1)
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 3 were given

Test 7: normal behavior:

	>>> test = MyList([1, 8, 7])
	>>> test.print_sorted()
	[1, 7, 8]

Test 8: another normal behavior test:

	>>> test = MyList([9, 4, 7, 0, 3])
	>>> test.print_sorted()
	[0, 3, 4, 7, 9]

Test 9: all negative numbers in list:

	>>> test = MyList([-1, -8, -7])
	>>> test.print_sorted()
	[-8, -7, -1]

Test 10: mix of positive and negative:

	>>> test =  MyList([-1, 8, -7])
	>>> test.print_sorted()
	[-7, -1, 8]

Test 11: list already sorted:

	>>> test = MyList([1, 7, 8])
	>>> test.print_sorted()
	[1, 7, 8]

Test 12: no changes to the list after print_sorted:

	>>> test = MyList([1, 8, 7])
	>>> test.print_sorted()
	[1, 7, 8]
	>>> test
	[1, 8, 7]

Test 13: this is a list to which I can append:

	>>> test = MyList([1, 8])
	>>> test.append(7)
	>>> test
	[1, 8, 7]
